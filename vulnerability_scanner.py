from idc import *
from idaapi import *
from idautils import *



dangerous_functions = {
    "fread"         : "size_t fread(void *buffer, size_t size, size_t count, FILE *stream) - buffer must be large enough to contain size*count bytes!",
    "gets"          : "char *gets(char *buffer) - Buffer overflow!!",
    "lstrcat"       : "LPTSTR WINAPI lstrcat(_Inout_ LPTSTR lpString1, _In_ LPTSTR lpString2) - lpString1 must be large enough to contain both strings, including the terminating null character!",
    "lstrcpy"       : "LPTSTR WINAPI lstrcpy(_Out_ LPTSTR lpString1, _In_ LPTSTR lpString2) - lpString1 must be large enough to contain the string pointed to by lpString2, including the terminating null character!",
    "mbscat"        : "mbscat: Refer to _mbscat documentation",
    "mbscpy"        : "mbscpy: Refer to _mbscpy documentation",
    "mbsncat"       : "mbsncat: Refer to _mbsncat documentation",
    "memcpy"        : "void *memcpy(void *dest, const void *src, size_t count) - The dest buffer must be large enough to contain count bytes of the src buffer!",
    #"olestrcat"     : "UNDOCUMENTED",
    #"snprintf"      : "UNDOCUMENTED",
    #"snwprintf"     : "UNDOCUMENTED",
    "sprintf"       : "int sprintf(char *buffer, const char *format [,argument] ...) - buffer must be large enough to contain the formatted arguments!",
    "sscanf"        : "int sscanf(const char *buffer, const char *format [,argument ] ...) - buffer must be large enough to contain the formatted arguments!",
    "strcpy"        : "char *strcpy(char *strDestination, const char *strSource) - strDestination must be large enough to contain the string pointed to by strSource!",
    "strcat"        : "char *strcat(char *strDestination, const char *strSource) - strDestination must be large enough to contain both strings, including the terminating null character!",
    "strncat"       : "char *strncat(char *strDest, const char *strSource, size_t count) - strDest must be large enough to contain strDest, count bytes of strSource and the terminating null character!",
    "strncpy"       : "UNDOCUMENTED",
    "swprintf"      : "int swprintf(wchar_t *buffer, const wchar_t *format [,argument] ...) - buffer must be large enough to contain the formatted arguments!",
    "swscanf"       : "int swscanf(const wchar_t *buffer, const wchar_t *format [,argument ] ...) - buffer must be large enough to contain the formatted arguments!",
    "vfprintf"      : "int __cdecl vfprintf(FILE *File, const char *Format, va_list ArgList)",
    #"vfwprintf"     : "UNDOCUMENTED",
    #"vprintf"       : "UNDOCUMENTED",
    #"vwprintf"      : "UNDOCUMENTED",
    "vsprintf"      : "int vsprintf(char *buffer, const char *format, va_list argptr) - format must not be a user-defined string and buffer must be large enough to contain the formatted arguments!",
    "vsnprintf"     : "int vsnprintf(char *buffer, size_t count, const char *format, va_list argptr) - format must not be a user-defined string and buffer must be large enough to contain the formatted arguments!",
    #"vsnwprintf"    : "UNDOCUMENTED",
    "vswprintf"     : "int vswprintf(wchar_t *buffer, const wchar_t *format, va_list argptr) - format must not be a user-defined string and buffer must be large enough to contain the formatted arguments!",
    "wcscat"        : "wchar_t *wcscat(wchar_t *strDestination, const wchar_t *strSource) - strDestination must be large enough to contain both strings, including the terminating null character!",
    "wcsncat"       : "wchar_t *wcsncat(wchar_t *strDest, const wchar_t *strSource, size_t count) - strDest must be large enough to contain strDest, count*sizeof(wchar_t) bytes of strSource and the terminating null character!",
    "wcscpy"        : "wchar_t *wcscpy(wchar_t *strDestination, const wchar_t *strSource) - strDestination must be large enough to contain the string pointed to by strSource!",
    "wmemcpy"       : "wchar_t *wmemcpy(wchar_t *dest, const wchar_t *src, size_t count) - The dest buffer must be large enough to contain count bytes of the src buffer!", 
    "wsprintf"      : "int wsprintf(_Out_ LPTSTR lpOut, _In_ LPCTSTR lpFmt, _In_ ...) - lpOut must be large enough to contain the formatted arguments!",
    "wvsprintf"     : "int WINAPI wvsprintf(_Out_  LPTSTR lpOutput, _In_   LPCTSTR lpFmt, _In_   va_list arglist) - lpOutput must be large enough to contain the formatted arguments!",
    #"_ftcscat"      : "UNDOCUMENTED",
    "_getws"        : "wchar_t *_getws(wchar_t *buffer) - Buffer overflow!!",
    "_mbscat"       : "unsigned char *_mbscat(unsigned char *strDestination, const unsigned char *strSource) - strDestination must be large enough to contain both strings, including the terminating null character!",
    "_mbsncat"      : "unsigned char *_mbsncat(unsigned char *strDest, const unsigned char *strSource, size_t count) - strDest must be large enough to contain strDest, count bytes of strSource and the terminating null character!",
    "_mbscpy"       : "unsigned char *_mbscpy(unsigned char *strDestination, const unsigned char *strSource) - strDestination must be large enough to contain the string pointed to by strSource!",
    }




################################################################################
#
# get_interesting_stack_vars function
#
################################################################################
def get_interesting_stack_vars(func_addr):
    
    i = 0
    prev_i = -1
    prev_var_name = ""
    interesting_vars = dict()

    stack_frame = GetFrame(func_addr)
    stack_frame_size = GetStrucSize(stack_frame)

    print "+ Stack frame size: %d bytes" % stack_frame_size    

    # Scan the stack frame for interesting variables
    while i < stack_frame_size:
        var_name = GetMemberName(stack_frame, i)

        if var_name != None:
            if prev_var_name == var_name:
                i = i + 1
            else:
                if prev_var_name == "":
                    prev_i = i
                    prev_var_name = var_name
                    i = i + 1
                else: 
                    prev_var_size = i - prev_i
                    if prev_var_size >= 12:
                        interesting_vars[prev_var_name] = prev_var_size

                    prev_i = i
                    prev_var_name = var_name
                    i = i + 1           
        else:
            i = i + 1

    return interesting_vars




################################################################################
#
# get_interesting_function_calls function
#
################################################################################
def get_interesting_function_calls(func_addr):

    function_calls = dict()
    interesting_calls = dict()

    # Get all the functions called by func
    for i in FuncItems(func_addr):
        if is_call_insn(i):
            xrefs = XrefsFrom(i, XREF_FAR)
            for xref in xrefs:
                function_calls[i] = xref.to


    # Keep the ones that are interesting
    for addr, xref_to in function_calls.iteritems():
        for dangerous_func in dangerous_functions.keys():
            if xref_to == LocByName(dangerous_func):              
                interesting_calls[addr] = dangerous_func

    return interesting_calls




################################################################################
#
# analyze_function function
#
################################################################################
def analyze_function():

    func_name = AskStr("", "Enter function name:")
    func_addr = LocByName(func_name)
    if not func_addr in Functions():
        print "Function '%s' not found." % func_name
        return

        
    print "Analyzing '%s' (0x%08x)..." % (func_name, func_addr)

    # Print a list of interesting variables
    interesting_vars = get_interesting_stack_vars(func_addr)
    if len(interesting_vars) > 0:
        print "  + %d insteresting stack variables have been found." % len(interesting_vars)
        for var_name, var_size in interesting_vars.iteritems():
            print "    - Stack variable: %s\t(%d bytes)" % (var_name, var_size)
    else:
        print "  + No interesting stack variables have been found!"

        
    # Print a list of dangerous functions
    interesting_calls = get_interesting_function_calls(func_addr)
    if len(interesting_calls) > 0:
        print "  + %d calls to known dangerous functions." % len(interesting_calls)
        for call_addr, call_func in interesting_calls.iteritems():
            print "    - %s call at 0x%08x" % (call_func, call_addr)
    else:
        print "  + No calls to known dangerous functions have been found!"




################################################################################
#
# locate_dangerous_functions function
#
################################################################################
def locate_dangerous_functions():
    
    nrefs = 0
    
    print "Scanning %s for code references to %d dangerous functions..." % (GetInputFile(), len(dangerous_functions)),
    for func in dangerous_functions.keys():
        addr = LocByName(func)
    
        if addr != BADADDR:
            code_refs = CodeRefsTo(addr,0)

            print "\n"
            print "+ %s" % dangerous_functions[func]
            print "+ code references to %s (%08x):" % (func, addr),
            for ref in code_refs:
                print "%08x" % ref,
                SetColor(ref,CIC_ITEM,0x0000ff)
                nrefs = nrefs + 1

    print "\n\n", nrefs, "references to a dangerous function found."    

    return




################################################################################
#
# Main function
#
################################################################################

print "\n\n"
print "----------------------------------------------------"
print "Hex-Rays IDA Pro Vulnerability Scanner plugin v0.0.1"
print "Gianni Gnesa (gnix) <research@ptrace-security.com>"
print "----------------------------------------------------\n"


option = AskStr("", "Mode: (1) Analyze function ; (2) Locate dangerous functions. Insert no.:")
if option == "1":
    analyze_function()
elif option == "2":
    locate_dangerous_functions()
else:
    print "Mode number not found!"

print "\nDone!"


